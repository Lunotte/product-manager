import { app, BrowserWindow, ipcMain } from 'electron';
import log from 'electron-log';
import path from 'path';
import db from '../db/database';
import { Produit } from '../models/Produit';
import { Categorie } from '../models/Categorie';
import { Fournisseur } from '../models/Fournisseur';
import { Unite } from '../models/Unite';

// import { addProduit, getAllProduit } from './queries/queries';

// const db = require('./src/database');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1000,
    width: 1200,
    // autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,  // Garder Node.js désactivé dans le rendu
      contextIsolation: true,  // Pour des raisons de sécurité
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if(!app.isPackaged){
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
};

log.transports.file.resolvePathFn = () => path.join(app.getPath('userData'), 'logs/catalogue.log');

ipcMain.on('log-error', (event, message) => {
  log.error('Erreur reçue du renderer :', message);
});

ipcMain.handle('get-categories', (): Categorie[] => {
  return db.getCategories();
});

ipcMain.handle('add-categorie', (_, nom: string): Categorie[] => {
  db.addCategory(nom);
  return db.getCategories();
});

ipcMain.handle('update-categorie', (_, id: number, nom: string): Categorie[] => {
  db.updateCategory(nom, id);
  return db.getCategories();
});

ipcMain.handle('delete-categorie', (_, id: number): Categorie[] => {
  db.deleteCategory(id);
  return db.getCategories();
});

ipcMain.handle('get-fournisseurs', (): Fournisseur[] => {
  return db.getFournisseurs();
});

ipcMain.handle('add-fournisseur', (_, nom: string): Fournisseur[] => {
  db.addFournisseur(nom);
  return db.getFournisseurs();
});

ipcMain.handle('update-fournisseur', (_, id: number, nom: string): Fournisseur[] => {
  db.updateFournisseur(nom, id);
  return db.getFournisseurs();
});

ipcMain.handle('delete-fournisseur', (_, id: number): Fournisseur[] => {
  db.deleteFournisseur(id);
  return db.getFournisseurs();
});


ipcMain.handle('get-unites', (): Unite[] => {
  return db.getUnites();
});

ipcMain.handle('add-unite', (_, nom: string): Unite[] => {
  db.addUnite(nom);
  return db.getUnites();
});

ipcMain.handle('update-unite', (_, id: number, nom: string): Unite[] => {
  db.updateUnite(nom, id);
  return db.getUnites();
});

ipcMain.handle('delete-unite', (_, id: number): Unite[] => {
  db.deleteUnite(id);
  return db.getUnites();
});


ipcMain.handle('get-produits', (): Produit[] => {
  return db.getProduits();
});

ipcMain.handle('rechercher-produit', (_, query: string): Produit[] => {
  return db.rechercherProduit(query);
});


ipcMain.handle('add-produit', (_, produit: Produit): Produit[] => {
  // addProduit(produit);
  // return getAllProduit();
  db.addProduit(produit.nom, produit.prixAchat, produit.taux, produit.prixVente, produit.categorieId, produit.fournisseurId, produit.uniteId);
  return db.getProduits();
});

ipcMain.handle('update-produit', (_, produit: Produit): Produit[] => {
  db.updateProduit(produit.id, produit.nom, produit.prixAchat, produit.taux, produit.prixVente, produit.categorieId, produit.fournisseurId, produit.uniteId);
  return db.getProduits();
});

ipcMain.handle('delete-produit', (_, id: number): Produit[] => {
  db.deleteProduit(id);
  return db.getProduits();
});


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

/**
 * Capturer les exceptions non gérées dans le processus principal
 */
process.on('uncaughtException', (error) => {
  log.error('Une erreur non gérée a été interceptée :', error);
});


process.on('unhandledRejection', (reason, promise) => {
  log.error('Rejet de promesse non géré :', reason);
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
